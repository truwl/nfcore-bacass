parameter_meta:
  bacass.samplesheet:
    description: Path to comma-separated file containing information about the samples
      in the experiment.
    group: input_output_options
    help: "You will need to create a design file with information about the samples\
      \ in your experiment before running the pipeline. Use this parameter to specify\
      \ its location. It has to be a tab-separated file with 6 columns, and a header\
      \ row. See [usage docs](https://nf-co.re/bacass/usage#samplesheet-input).\n\n\
      For example:\n\n`--input 'design_hybrid.csv'`\n\nAn example of properly formatted\
      \ input files can be found at the [nf-core/test-datasets](https://github.com/nf-core/test-datasets/tree/bacass).\
      \ \n\nFor example, this is the input used for a hybrid assembly in testing:\n\
      ID R1 R2 LongFastQ Fast5 GenomeSize\nERR044595 https://github.com/nf-core/test-datasets/raw/bacass/ERR044595_1M_1.fastq.gz\
      \ https://github.com/nf-core/test-datasets/raw/bacass/ERR044595_1M_2.fastq.gz\
      \ https://github.com/nf-core/test-datasets/raw/bacass/nanopore/subset15000.fq.gz\
      \ NA 2.8m\n\n* `ID`: The identifier to use for handling the dataset e.g. sample\
      \ name\n* `R1`: The forward reads in case of available short-read data\n* `R2`:\
      \ The reverse reads in case of available short-read data\n* `LongFastQ`: The\
      \ long read FastQ file with reads in FASTQ format\n* `Fast5`: The folder containing\
      \ the basecalled fast5 files\n* `GenomeSize`: The expected genome size of the\
      \ assembly. Only used by the canu assembler.\n\nMissing values (e.g. Fast5 folder\
      \ in case of short reads) can be omitted by using a `NA` in the TSV file. The\
      \ pipeline will handle such cases appropriately then."
    hidden: false
  bacass.outdir:
    description: Path to the output directory where the results will be saved.
    group: input_output_options
    help: ''
    hidden: false
  bacass.email:
    description: Email address for completion summary.
    group: input_output_options
    help: Set this parameter to your e-mail address to get a summary e-mail with details
      of the run sent to you when the workflow exits. If set in your user config file
      (`~/.nextflow/config`) then you don't need to specify this on the command line
      for every run.
    hidden: false
  bacass.kraken2db:
    description: Path to Kraken2 database.
    group: contamination_screening
    help: 'See [Kraken2 homepage](https://benlangmead.github.io/aws-indexes/k2) for
      download

      links. Minikraken2 8GB is a reasonable choice, since we run Kraken here mainly
      just to check for

      sample purity.'
    hidden: false
  bacass.assembler:
    description: The assembler to use for assembly. Available options are `Unicycler`,
      `Canu`, `Miniasm`. The latter two are only available for long-read data, whereas
      Unicycler can be used for short or hybrid assembly projects.
    group: assembly_parameters
    help: ''
    hidden: false
  bacass.assembly_type:
    description: Which type of assembly to perform.
    group: assembly_parameters
    help: This adjusts the type of assembly done with the input data and can be any
      of `long`, `short` or `hybrid`. Short & Hybrid assembly will always run Unicycler,
      whereas long-read assembly can be configured separately using the `--assembler`
      parameter.
    hidden: false
  bacass.unicycler_args:
    description: Extra arguments for Unicycler
    group: assembly_parameters
    help: This advanced option allows you to pass extra arguments to Unicycler (e.g.
      `"--mode conservative"` or `"--no_correct"`). For this to work you need to quote
      the arguments and add at least one space.
    hidden: false
  bacass.canu_args:
    description: This can be used to supply [extra options](https://canu.readthedocs.io/en/latest/quick-start.html)
      to the Canu assembler. Will be ignored when other assemblers are used.
    group: assembly_parameters
    help: ''
    hidden: false
  bacass.polish_method:
    description: Which assembly polishing method to use.
    group: assembly_polishing
    help: Can be used to define which polishing method is used by default for long
      reads. Default is `medaka`, available options are `nanopolish` or `medaka`.
    hidden: false
  bacass.annotation_tool:
    description: The annotation method to annotate the final assembly. Default choice
      is `prokka`, but the `dfast` tool is also available. For the latter, make sure
      to create your specific config if you're not happy with the default one provided.
      See [#dfast_config](#dfastconfig) to find out how.
    group: annotation
    help: ''
    hidden: false
  bacass.prokka_args:
    description: Extra arguments for prokka annotation tool.
    group: annotation
    help: 'This advanced option allows you to pass extra arguments to Prokka (e.g.
      `" --rfam"` or `" --genus name"`). For this to work you need to quote the arguments
      and add at least one space between the arguments. Example:


      ```bash

      --prokka_args `--rfam --genus Escherichia Coli`

      ```

      '
    hidden: false
  bacass.dfast_config:
    description: Specifies a configuration file for the [DFAST](https://github.com/nigyta/dfast_core)
      annotation method.
    group: annotation
    help: This can be used instead of PROKKA if required to specify a specific config
      file for annotation. If you want to know how to create your config file, please
      refer to the [DFAST](https://github.com/nigyta/dfast_core) readme on how to
      create one.  The default config (`assets/test_config_dfast.py`) is just included
      for testing, so if you want to annotate using DFAST, you have to create a config!
    hidden: false
  bacass.skip_kraken2:
    description: Skip running Kraken2 classifier on reads.
    group: skipping_options
    help: ''
    hidden: false
  bacass.skip_annotation:
    description: Skip annotating the assembly with Prokka /DFAST.
    group: skipping_options
    help: ''
    hidden: false
  bacass.skip_pycoqc:
    description: Skip running `PycoQC` on long read input.
    group: skipping_options
    help: ''
    hidden: false
  bacass.skip_polish:
    description: Skip polishing the long-read assembly with fast5 input. Will not
      affect short/hybrid assemblies.
    group: skipping_options
    help: ''
    hidden: false
  bacass.custom_config_version:
    description: Git commit id for Institutional configs.
    group: institutional_config_options
    help: ''
    hidden: true
  bacass.custom_config_base:
    description: Base directory for Institutional configs.
    group: institutional_config_options
    help: If you're running offline, Nextflow will not be able to fetch the institutional
      config files from the internet. If you don't need them, then this is not a problem.
      If you do need them, you should download the files from the repo and tell Nextflow
      where to find them with this parameter.
    hidden: true
  bacass.hostnames:
    description: Institutional configs hostname.
    group: institutional_config_options
    help: ''
    hidden: true
  bacass.config_profile_name:
    description: Institutional config name.
    group: institutional_config_options
    help: ''
    hidden: true
  bacass.config_profile_description:
    description: Institutional config description.
    group: institutional_config_options
    help: ''
    hidden: true
  bacass.config_profile_contact:
    description: Institutional config contact information.
    group: institutional_config_options
    help: ''
    hidden: true
  bacass.config_profile_url:
    description: Institutional config URL link.
    group: institutional_config_options
    help: ''
    hidden: true
  bacass.max_cpus:
    description: Maximum number of CPUs that can be requested for any single job.
    group: max_job_request_options
    help: Use to set an upper-limit for the CPU requirement for each process. Should
      be an integer e.g. `--max_cpus 1`
    hidden: true
  bacass.max_memory:
    description: Maximum amount of memory that can be requested for any single job.
    group: max_job_request_options
    help: Use to set an upper-limit for the memory requirement for each process. Should
      be a string in the format integer-unit e.g. `--max_memory '8.GB'`
    hidden: true
  bacass.max_time:
    description: Maximum amount of time that can be requested for any single job.
    group: max_job_request_options
    help: Use to set an upper-limit for the time requirement for each process. Should
      be a string in the format integer-unit e.g. `--max_time '2.h'`
    hidden: true
  bacass.help:
    description: Display help text.
    group: generic_options
    help: ''
    hidden: true
  bacass.publish_dir_mode:
    description: Method used to save pipeline results to output directory.
    group: generic_options
    help: The Nextflow `publishDir` option specifies which intermediate files should
      be saved to the output directory. This option tells the pipeline what method
      should be used to move these files. See [Nextflow docs](https://www.nextflow.io/docs/latest/process.html#publishdir)
      for details.
    hidden: true
  bacass.multiqc_title:
    description: MultiQC report title. Printed as page header, used for filename if
      not otherwise specified.
    group: generic_options
    help: ''
    hidden: false
  bacass.email_on_fail:
    description: Email address for completion summary, only when pipeline fails.
    group: generic_options
    help: An email address to send a summary email to when the pipeline is completed
      - ONLY sent if the pipeline does not exit successfully.
    hidden: true
  bacass.plaintext_email:
    description: Send plain-text email instead of HTML.
    group: generic_options
    help: ''
    hidden: true
  bacass.max_multiqc_email_size:
    description: File size limit when attaching MultiQC reports to summary emails.
    group: generic_options
    help: ''
    hidden: true
  bacass.monochrome_logs:
    description: Do not use coloured log outputs.
    group: generic_options
    help: ''
    hidden: true
  bacass.multiqc_config:
    description: Custom config file to supply to MultiQC.
    group: generic_options
    help: ''
    hidden: true
  bacass.tracedir:
    description: Directory to keep pipeline Nextflow logs and reports.
    group: generic_options
    help: ''
    hidden: true
  bacass.validate_params:
    description: Boolean whether to validate parameters against the schema at runtime
    group: generic_options
    help: ''
    hidden: true
  bacass.show_hidden_params:
    description: Show all params when using `--help`
    group: generic_options
    help: By default, parameters set as _hidden_ in the schema are not shown on the
      command line when a user runs with `--help`. Specifying this option will tell
      the pipeline to show all parameters.
    hidden: true
  bacass.enable_conda:
    description: Run this workflow with Conda. You can also use '-profile conda' instead
      of providing this parameter.
    group: generic_options
    help: ''
    hidden: true
  bacass.singularity_pull_docker_container:
    description: Instead of directly downloading Singularity images for use with Singularity,
      force the workflow to pull and convert Docker containers instead.
    group: generic_options
    help: This may be useful for example if you are unable to directly pull Singularity
      containers to run the pipeline due to http/https proxy issues.
    hidden: true
parameter_group:
  input_output_options:
    description: Define where the pipeline should find input data and save output
      data.
    help: null
    title: Input/output options
  contamination_screening:
    description: ''
    help: null
    title: Contamination Screening
  assembly_parameters:
    description: Parameters for the assembly
    help: null
    title: Assembly parameters
  assembly_polishing:
    description: ''
    help: null
    title: Assembly Polishing
  annotation:
    description: ''
    help: null
    title: Annotation
  skipping_options:
    description: ''
    help: null
    title: Skipping Options
  institutional_config_options:
    description: Parameters used to describe centralised config profiles. These should
      not be edited.
    help: The centralised nf-core configuration profiles use a handful of pipeline
      parameters to describe themselves. This information is then printed to the Nextflow
      log when you run a pipeline. You should not need to change these values when
      you run a pipeline.
    title: Institutional config options
  max_job_request_options:
    description: Set the top limit for requested resources for any single job.
    help: 'If you are running on a smaller system, a pipeline step requesting more
      resources than are available may cause the Nextflow to stop the run with an
      error. These options allow you to cap the maximum resources requested by any
      single job so that the pipeline will run on your system.


      Note that you can not _increase_ the resources requested by any job using these
      options. For that you will need your own configuration file. See [the nf-core
      website](https://nf-co.re/usage/configuration) for details.'
    title: Max job request options
  generic_options:
    description: Less common options for the pipeline, typically set in a config file.
    help: 'These options are common to all nf-core pipelines and allow you to customise
      some of the core preferences for how the pipeline runs.


      Typically these options would be set in a Nextflow config file loaded for all
      pipeline runs, such as `~/.nextflow/config`.'
    title: Generic options
